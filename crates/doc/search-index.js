var searchIndex = new Map(JSON.parse('[["kani",{"t":"GKYFKYPPPEYPPFEHMNNNNHCQHHEENNNNNNHMCNNNHCHQXNCNNNNNNCQQQQQNNNCOQQQQXCXNHXXOQQXXCXCQXEOXXNNNNNNNNNNXCEXXXXXHPPFFGKHHNNNNNNNNNNNNNNMNNHNNNNNNNNNHKMHHHHHHHHFNNNNNNNNNNHHHH","n":["AllocationStatus","Arbitrary","","ArbitraryPointer","BoundedArbitrary","","Dangling","DeadObject","InBounds","Invariant","","Null","OutOfBounds","PointerGenerator","RoundRobin","any","","","any_alloc_status","any_array","any_in_bounds","any_where","arbitrary","arbitrary_tuple","assert","assume","block_on","block_on_with_spawn","borrow","","","borrow_mut","","","bounded_any","","bounded_arbitrary","clone","clone_into","clone_to_uninit","concrete_playback_run","contracts","cover","","ensures","eq","float","fmt","","","from","","","futures","generate_arbitrary","generate_bounded_arbitrary","generate_float","generate_models","implies","into","","","invariant","is_initialized","kani_intrinsics","kani_lib","kani_mem","kani_mem_init","loop_invariant","mem","modifies","new","pointer_generator","proof","proof_for_contract","ptr","ptr_generator","ptr_generator_fn","recursion","requires","shadow","should_panic","slice","slice_generator","solver","spawn","status","stub","stub_verified","to_owned","try_from","","","try_into","","","type_id","","","unwind","vec","yield_now","ensures","modifies","proof_for_contract","requires","stub_verified","float_to_int_in_range","CanAssumeRunning","CannotAssumeRunning","JoinHandle","RoundRobin","SchedulingAssumption","SchedulingStrategy","block_on","block_on_with_spawn","borrow","","","borrow_mut","","","default","from","","","into","","","into_future","pick_task","","poll","spawn","try_from","","","try_into","","","type_id","","","yield_now","Invariant","is_safe","can_dereference","can_read_unaligned","can_write","can_write_unaligned","checked_align_of_raw","checked_size_of_raw","is_inbounds","same_allocation","ShadowMem","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","any_slice_of_array","any_slice_of_array_mut","any_vec","exact_vec"],"q":[[0,"kani"],[102,"kani::contracts"],[107,"kani::float"],[108,"kani::futures"],[144,"kani::invariant"],[146,"kani::mem"],[154,"kani::shadow"],[165,"kani::slice"],[167,"kani::vec"],[169,"kani::arbitrary_ptr"],[170,"core::ops::function"],[171,"alloc::vec"],[172,"core::fmt"],[173,"core::result"],[174,"core::any"],[175,"core::convert::num"],[176,"core::future::future"],[177,"core::marker"],[178,"core::pin"],[179,"core::task::wake"],[180,"core::task::poll"],[181,"core::option"],[182,"kani_macros"],[183,"kani_core"]],"i":"``````d00``00```b1h10```````0l3103`Aj`444`````4`214214``````214`1```````2```1``````````1``4214214214`````````Ch0``````0ClCd21002102101Cb12`321321321``Dd`````````Dh000000000````","f":"```````````````{{}cb}{{}b}{{}d}{{{j{fh}}}{{l{c}}}b}{{}{{n{b}}}}1{ecb{{Ad{{j{c}}}{{A`{Ab}}}}}}``{{Ab{j{Af}}}Ah}{AbAh}``{j{{j{c}}}{}}00{{{j{f}}}{{j{fc}}}{}}00{{}cAj}{{}Aj}`{{{j{d}}}d}{{j{j{fc}}}Ah{}}{{jAl}Ah}{{{An{{An{Al}}}}c}AhB`}`9``{{{j{d}}{j{d}}}Ab}`{{{j{h}}{j{fBb}}}Bd}{{{j{{l{c}}}}{j{fBb}}}BdBf}{{{j{d}}{j{fBb}}}Bd}{cc{}}00``````{{}c{}}00`{lAb}```````{{}h}0``{l}``````````{ld}``{jc{}}{c{{Bh{e}}}{}{}}00{{}{{Bh{c}}}{}}00{jBj}00````````{eAb{}{{Bl{c}}}}``````{ec{}{{Bn{}{{A`{c}}}}}}{{ce}Ah{{Bn{}{{A`{Ah}}}}C`}Cb}{j{{j{c}}}{}}00{{{j{f}}}{{j{fc}}}{}}00{{}Cd}???>>>{{}}{{{j{fCb}}Cf}{{Cj{CfCh}}}}{{{j{fCd}}Cf}{{Cj{CfCh}}}}{{{Cn{{j{fCl}}}}{j{fD`}}}{{Db{c}}}{}}{cCl{{Bn{}{{A`{Ah}}}}C`}}===<<<;;;{{}{{`{{Bn{}{{A`{Ah}}}}}}}}`{{{j{Dd}}}Ab}{{}Ab}000{{}{{Df{Cf}}}}011`;:{cc{}}{{{j{{Dh{c}}}}}cDj}{{}c{}}{c{{Dh{c}}}Dj}{{{j{f{Dh{c}}}}c}AhDj}{c{{Bh{e}}}{}{}}{{}{{Bh{c}}}{}}{jBj}{{{j{{n{c}}}}}{{j{{Dl{c}}}}}{}}{{{j{f{n{c}}}}}{{j{f{Dl{c}}}}}{}}{{}{{An{c}}}b}0","D":"Kn","p":[[10,"Arbitrary",0],[6,"AllocationStatus",0,169],[0,"mut"],[5,"PointerGenerator",0,169],[1,"reference",null,null,1],[5,"ArbitraryPointer",0,169],[1,"array"],[17,"Output"],[1,"bool"],[10,"FnOnce",170],[1,"str"],[1,"unit"],[10,"BoundedArbitrary",0],[1,"u8"],[5,"Vec",171],[10,"Fn",170],[5,"Formatter",172],[8,"Result",172],[10,"Debug",172],[6,"Result",173,null,1],[5,"TypeId",174],[10,"FloatToInt",175],[10,"Future",176,null,1],[10,"Sync",177],[10,"SchedulingStrategy",108],[5,"RoundRobin",108],[1,"usize"],[6,"SchedulingAssumption",108],[1,"tuple",null,null,1],[5,"JoinHandle",108],[5,"Pin",178],[5,"Context",179],[6,"Poll",180],[10,"Invariant",144],[6,"Option",181,null,1],[5,"ShadowMem",154],[10,"Copy",177],[1,"slice"]],"r":[[0,169],[2,182],[3,169],[5,182],[6,169],[7,169],[8,169],[9,144],[10,182],[11,169],[12,169],[13,169],[14,108],[17,169],[18,169],[20,169],[23,183],[26,108],[27,108],[28,169],[29,169],[30,169],[31,169],[32,169],[33,169],[37,169],[38,169],[39,169],[44,182],[45,169],[47,169],[48,169],[49,169],[50,169],[51,169],[52,169],[54,183],[55,183],[56,183],[57,183],[59,169],[60,169],[61,169],[63,169],[64,183],[65,183],[66,183],[67,183],[68,182],[70,182],[71,169],[72,169],[73,182],[74,182],[75,169],[76,183],[77,183],[78,182],[79,182],[81,182],[83,183],[84,182],[85,108],[86,169],[87,182],[88,182],[89,169],[90,169],[91,169],[92,169],[93,169],[94,169],[95,169],[96,169],[97,169],[98,169],[99,182],[101,108],[102,182],[103,182],[104,182],[105,182],[106,182]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEoAHAAAAAAAAgAAAAUAAAAKAAAADwAAABEAAQAUAAAAGwAHACQAAAAmAAIALAAAAC4AAAAwAAIANwADAEMAAQBNAAEAUwABAFYAAABaAAkAZQABAG0AAQB1AAYAggAAAIQAAQCHAAgAkgAAAJwAAQCjAAIA","P":[[15,"T"],[16,""],[18,"T"],[19,""],[20,"T"],[21,"T,F"],[24,""],[28,"T"],[35,""],[38,"T"],[39,""],[40,"F"],[42,""],[48,"T"],[49,""],[50,"T"],[59,"U"],[63,""],[89,"T"],[90,"U,T"],[93,"U"],[96,""],[107,"Int,Float"],[114,"T"],[115,"F"],[116,"T"],[122,""],[123,"T"],[126,"U"],[129,""],[132,"Future::Output"],[133,"F"],[134,"U,T"],[137,"U"],[140,""],[155,"T"],[159,"U"],[160,"T"],[162,"U,T"],[163,"U"],[164,""],[165,"T"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[5777]}